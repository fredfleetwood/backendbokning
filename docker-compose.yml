# Docker Compose configuration for VPS Automation Server

version: '3.8'

services:
  # Main FastAPI application
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: vps-automation-web
    restart: unless-stopped
    ports:
      - "8080:8000"
      - "9090:9090"  # Metrics port
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - app_tmp:/app/tmp
      # Shared memory for browsers
      - /dev/shm:/dev/shm
    networks:
      - vps_automation_network
    command: ["python", "-m", "uvicorn", "app.main_production:app", "--host", "0.0.0.0", "--port", "8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    mem_limit: 2g
    cpus: '1.0'

  # Celery worker for booking jobs
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: vps-automation-worker
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.celery_app", "worker", "--loglevel=info", "--concurrency=3", "--queues=booking,default"]
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      - WORKER_CONCURRENCY=3
      - MAX_BROWSER_INSTANCES=3
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - app_tmp:/app/tmp
      # Shared memory for browsers - critical for browser automation
      - /dev/shm:/dev/shm
    networks:
      - vps_automation_network
    healthcheck:
      test: ["CMD", "celery", "-A", "app.workers.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    security_opt:
      - no-new-privileges:true
    mem_limit: 4g  # More memory for browser automation
    cpus: '2.0'

  # Additional worker for maintenance tasks
  maintenance_worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: vps-automation-maintenance
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.celery_app", "worker", "--loglevel=info", "--concurrency=1", "--queues=maintenance,health"]
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
    networks:
      - vps_automation_network
    security_opt:
      - no-new-privileges:true
    mem_limit: 512m
    cpus: '0.5'

  # Celery Beat scheduler
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: vps-automation-scheduler
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.celery_app", "beat", "--loglevel=info"]
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - LOG_LEVEL=INFO
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - scheduler_data:/app/celerybeat-schedule
    networks:
      - vps_automation_network
    security_opt:
      - no-new-privileges:true
    mem_limit: 256m
    cpus: '0.2'

  # Redis for queue and caching
  redis:
    image: redis:7-alpine
    container_name: vps-automation-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    networks:
      - vps_automation_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true
    mem_limit: 1g
    cpus: '0.5'

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: vps-automation-flower
    restart: unless-stopped
    command: ["celery", "-A", "app.workers.celery_app", "flower", "--port=5555", "--broker=redis://redis:6379/1"]
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - FLOWER_BASIC_AUTH=admin:changeme123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - vps_automation_network
    security_opt:
      - no-new-privileges:true
    mem_limit: 256m
    cpus: '0.2'

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: vps-automation-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/ssl/certs
    depends_on:
      - web
    networks:
      - vps_automation_network
    security_opt:
      - no-new-privileges:true
    mem_limit: 128m
    cpus: '0.1'
    profiles:
      - production  # Only start with --profile production

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vps-automation-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - vps_automation_network
    security_opt:
      - no-new-privileges:true
    mem_limit: 512m
    cpus: '0.3'
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vps-automation-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=changeme123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - vps_automation_network
    security_opt:
      - no-new-privileges:true
    mem_limit: 256m
    cpus: '0.2'
    profiles:
      - monitoring

# Named volumes for persistence
volumes:
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_tmp:
    driver: local
  scheduler_data:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  vps_automation_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16 